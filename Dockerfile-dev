# Find eligible builder and runner images on Docker Hub. We use Ubuntu/Debian instead of
# Alpine to avoid DNS resolution issues in production.
#
# https://hub.docker.com/r/hexpm/elixir/tags?page=1&name=ubuntu
# https://hub.docker.com/_/ubuntu?tab=tags
#
#
# This file is based on these images:
#
#   - https://hub.docker.com/r/hexpm/elixir/tags - for the build image
#   - https://hub.docker.com/_/debian?tab=tags&page=1&name=bullseye-20210902-slim - for the release image
#   - https://pkgs.org/ - resource for finding needed packages
#   - Ex: hexpm/elixir:1.13.2-erlang-24.2.1-debian-bullseye-20210902-slim
#
ARG ELIXIR_VERSION=1.17.3
ARG OTP_VERSION=27.1.2
ARG DEBIAN_VERSION=bookworm-20241202
ARG NODE_VERSION=18.17.1

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${DEBIAN_VERSION}"
ARG RUNNER_IMAGE="debian:${DEBIAN_VERSION}"

FROM ${BUILDER_IMAGE} as dev
ARG NODE_VERSION

# install build and dev dependencies
RUN apt-get update -y && apt-get install -y \
    build-essential curl git inotify-tools libsodium-dev

COPY bin/install_node bin/install_node
RUN bin/install_node ${NODE_VERSION}

RUN apt-get clean && rm -f /var/lib/apt/lists/*_*

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV

ARG MIX_ENV="dev"
ENV MIX_ENV=${MIX_ENV}

COPY mix.* ./
RUN mix deps.get --only $MIX_ENV

RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config config
RUN mix deps.compile

COPY priv priv
COPY lib lib
RUN mix lightning.install_runtime
RUN mix lightning.install_schemas
RUN mix lightning.install_adaptor_icons

COPY bin bin
COPY assets assets
RUN npm install --prefix assets


ENTRYPOINT ["/app/bin/entrypoint"]

ARG PORT
EXPOSE ${PORT}

CMD ["mix", "phx.server"]
