version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

commands:
  install_node:
    description: "Install NodeJS"
    parameters:
      version:
        type: string
    steps:
      - restore_cache:
          key: v4-nodejs-<< parameters.version >>

      - run:
          name: "Install Node.js and npm"
          command: |
            ./bin/install_node --no-cleanup << parameters.version >>

      - save_cache:
          key: v4-nodejs-<< parameters.version >>
          paths:
            - ./node-v<< parameters.version >>-linux-x64.tar.gz

      - run:
          name: "Cleanup NodeJS install files"
          command: |
            rm ./node-v*.tar.gz

jobs:
  build:
    parameters:
      elixir_version:
        description: Elixir version
        type: string
        default: "1.16.2-otp-26"
      nodejs_version:
        description: NodeJS version
        type: string
        default: "18.17.1"
      execute:
        description: What steps to execute after build
        type: steps

    parallelism: 1
    docker:
      - image: elixir:<< parameters.elixir_version >>
      - image: cimg/postgres:15.3
    environment:
      ERL_FLAGS: +S 4:4
      ASSERT_RECEIVE_TIMEOUT: 1000
      MIX_ENV: test
    working_directory: /home/lightning/project

    steps:
      - run: adduser --home /home/lightning --system lightning
      - checkout
      - install_node:
          version: << parameters.nodejs_version >>

      - run:
          name: "Save Elixir and Erlang version for PLT caching"
          command: echo "$ELIXIR_VERSION $OTP_VERSION" | tee .elixir_otp_version

      - run:
          name: "Introspect schedulers"
          command: elixir -v

      - restore_cache:
          keys:
            - v3-deps-{{ arch }}-{{ checksum ".elixir_otp_version" }}-{{ checksum "mix.lock" }}
            - v3-deps-{{ arch }}-{{ checksum ".elixir_otp_version" }}
      - run:
          name: "Install libsodium and sudo"
          command: |
            apt-get update && apt-get install -y libsodium-dev sudo
      - run: |
          echo 'Defaults env_keep += "ERL_FLAGS ASSERT_RECEIVE_TIMEOUT MIX_ENV"' | \
            sudo EDITOR='tee -a' visudo

      - run: chown -R lightning /home/lightning
      - run: sudo -u lightning mix local.hex --force && mix local.rebar --force
      - run: cd assets; sudo -u lightning npm install
      - run: sudo -u lightning mix do deps.get --only test, deps.compile, compile
      - run: sudo -u lightning mix lightning.install_runtime

      - save_cache:
          key: v3-deps-{{ arch }}-{{ checksum ".elixir_otp_version" }}-{{ checksum "mix.lock" }}
          paths:
            - _build
            - deps
            - ~/.mix

      - restore_cache:
          name: "Restore PLT cache"
          keys:
            - v3-plt-{{ arch }}-{{ checksum ".elixir_otp_version" }}-{{ checksum "mix.lock" }}
            - v3-plt-{{ arch }}-{{ checksum ".elixir_otp_version" }}

      - run: sudo -u lightning env MIX_ENV=test mix dialyzer --plt
      - save_cache:
          key: v3-plt-{{ arch }}-{{ checksum ".elixir_otp_version" }}-{{ checksum "mix.lock" }}
          paths:
            - priv/plts

      - steps: << parameters.execute >>

workflows:
  pre-flight checks:
    jobs:
      - build:
          name: "Check code formatting"
          execute:
            - run: sudo -u lightning mix format --check-formatted
      - build:
          name: "Check code style"
          execute:
            - run: sudo -u lightning mix credo --strict --all
      - build:
          name: "Type check"
          execute:
            - run: sudo -u lightning mix dialyzer
      - build:
          name: "Check for security vulnerabilities"
          execute:
            - run: sudo -u lightning mix sobelow
      - build:
          name: "Check Elixir tests (codecov)"
          execute:
            - run: sudo -u lightning mix do ecto.create, ecto.migrate
            - run:
                command: sudo -u lightning mix coveralls.json -o ./test/reports
            - codecov/upload:
                file: test/reports/excoveralls.json
            - store_test_results:
                path: test/reports/
      - build:
          name: "Check Javascript tests"
          execute:
            - run: cd assets; sudo -u lightning npm install && npm run test-report
