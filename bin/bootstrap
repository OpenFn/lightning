#!/usr/bin/env bash
# This script installs all dependencies required to setup Lightning for development.

set -euo pipefail

trap 'echo "❌ Script interrupted at line $LINENO"; exit 1' ERR INT

OS=""
ARCH=""
HAS_RUST=""
HAS_HOMEBREW=""
HOMEBREW_PACKAGES_INSTALLED=""
HOMEBREW_PREFIX=""
MISSING_SYSTEM_DEPS=()
MISSING_BREW_PACKAGES=()

gather_environment_facts() {
  echo "🔍 Gathering environment information..."

  OS="$(uname)"
  ARCH="$(uname -m)"
  echo "Platform: $OS $ARCH"

  if command -v node &>/dev/null; then
    echo "✅ Node.js: $(node --version)"
  else
    MISSING_SYSTEM_DEPS+=("Node.js")
  fi

  if command -v elixir &>/dev/null; then
    local elixir_version
    elixir_version="$(elixir --version 2>/dev/null | head -1 || echo "version unknown")"
    echo "✅ Elixir: $elixir_version"
  else
    MISSING_SYSTEM_DEPS+=("Elixir")
  fi

  if command -v rustc &>/dev/null; then
    HAS_RUST=true
    echo "✅ Rust: $(rustc --version)"
  else
    HAS_RUST=false
    MISSING_BREW_PACKAGES+=("rust")
  fi

  if command -v brew &>/dev/null; then
    HAS_HOMEBREW=true
    echo "✅ Homebrew: $(brew --version | head -1)"
    
    HOMEBREW_PREFIX="$(brew --prefix)"
    echo "   Using prefix: $HOMEBREW_PREFIX"

    HOMEBREW_PACKAGES_INSTALLED="$(brew list -1 2>/dev/null || true)"
  else
    HAS_HOMEBREW=false
  fi

  if [[ "$HAS_HOMEBREW" == true ]]; then
    local required_brew_packages
    required_brew_packages=(libsodium cmake)

    for package in "${required_brew_packages[@]}"; do
      if echo "$HOMEBREW_PACKAGES_INSTALLED" | grep -q "^$package$"; then
        echo "✅ $package (via Homebrew)"
      else
        MISSING_BREW_PACKAGES+=("$package")
      fi
    done

    if [[ "$HAS_RUST" == false ]]; then
      if echo "$HOMEBREW_PACKAGES_INSTALLED" | grep -q "^rust$"; then
        echo "✅ Rust (via Homebrew)"
        local new_missing=()
        for pkg in "${MISSING_BREW_PACKAGES[@]}"; do
          if [[ "$pkg" != "rust" ]]; then
            new_missing+=("$pkg")
          fi
        done
        MISSING_BREW_PACKAGES=("${new_missing[@]}")
      fi
    fi
  fi

  if [[ "$OS" == "Darwin" ]]; then
    if xcode-select -p &>/dev/null; then
      echo "✅ Xcode Command Line Tools: $(xcode-select -p)"
    else
      echo "❌ Xcode Command Line Tools not installed"
      MISSING_SYSTEM_DEPS+=("Xcode Command Line Tools")
    fi

    if echo '#include <cstddef>' | clang++ -x c++ -c - &>/dev/null; then
      echo "✅ C++ standard library headers found"
    else
      echo "⚠️  C++ headers not accessible - this often requires reinstalling Command Line Tools"
      echo ""
      echo "   Try these solutions in order:"
      echo "   1. Reset Xcode path: sudo xcode-select --reset"
      echo "   2. If that doesn't work, completely reinstall CLT:"
      echo "      sudo rm -rf /Library/Developer/CommandLineTools"
      echo "      xcode-select --install"
      echo ""
      echo "   Note: The reinstall can take 10-15 minutes to download and install."
    fi
  fi

  echo ""
}

check_environment_status() {
  echo "📋 Environment Status Summary:"

  local has_critical_missing=false
  local has_installable_missing=false

  if [[ ${#MISSING_SYSTEM_DEPS[@]} -gt 0 ]]; then
    echo "❌ Missing critical system dependencies:"
    for dep in "${MISSING_SYSTEM_DEPS[@]}"; do
      echo "   - $dep"
      if [[ "$dep" == "Xcode Command Line Tools" ]]; then
        echo "     Run: xcode-select --install"
      fi
    done
    has_critical_missing=true
  fi

  if [[ ${#MISSING_BREW_PACKAGES[@]} -gt 0 ]]; then
    if [[ "$HAS_HOMEBREW" == true ]]; then
      echo "📦 Missing Homebrew packages (will install):"
      for package in "${MISSING_BREW_PACKAGES[@]}"; do
        echo "   - $package"
      done
      has_installable_missing=true
    else
      echo "❌ Homebrew not available, cannot install:"
      for package in "${MISSING_BREW_PACKAGES[@]}"; do
        echo "   - $package"
      done
      has_critical_missing=true
    fi
  fi

  if [[ "$has_critical_missing" == true ]]; then
    echo ""
    echo "❌ Critical dependencies are missing. Please install them manually and re-run this script."
    exit 1
  fi

  if [[ "$has_installable_missing" == false ]]; then
    echo "✅ All dependencies are satisfied"
  fi

  echo ""
}

install_missing_homebrew_packages() {
  if [[ ${#MISSING_BREW_PACKAGES[@]} -gt 0 ]] && [[ "$HAS_HOMEBREW" == true ]]; then
    echo "📦 Installing missing Homebrew packages: ${MISSING_BREW_PACKAGES[*]}"
    if brew install "${MISSING_BREW_PACKAGES[@]}"; then
      echo "✅ All missing packages have been installed"
    else
      echo "❌ Failed to install some packages"
      exit 1
    fi
    echo ""
  fi
}

setup_environment_variables() {
  if [[ "$OS" == "Darwin" ]]; then
    if echo "$HOMEBREW_PACKAGES_INSTALLED" | grep -q "^libsodium$" || brew list libsodium &>/dev/null; then
      export CPATH="$HOMEBREW_PREFIX/include"
      export LIBRARY_PATH="$HOMEBREW_PREFIX/lib"
      echo "🔧 Set environment variables for libsodium (using $HOMEBREW_PREFIX)"
    fi

    if command -v xcrun &>/dev/null; then
      local sdk_path
      sdk_path=$(xcrun --show-sdk-path 2>/dev/null || echo "")
      if [[ -n "$sdk_path" ]]; then
        export SDKROOT="$sdk_path"
        export CPATH="$CPATH:$SDKROOT/usr/include"
        echo "🔧 Set SDKROOT to $SDKROOT"
      fi
    fi
  fi
}

main() {
  gather_environment_facts
  check_environment_status
  install_missing_homebrew_packages
  setup_environment_variables

  echo "🔧 Setting up Elixir environment..."
  mix local.hex --if-missing
  mix local.rebar --if-missing

  echo "📦 Installing Elixir dependencies..."
  mix deps.get
  mix deps.compile

  # If you have already compiled Rambo explicitly via `mix compile.rambo`, and you
  # are still seeing the following error:
  #
  # ```
  # sh: /path_to_directory/Lightning/_build/dev/lib/rambo/priv/rambo: No such file or directory
  # sh: line 0: exec: /path_to_directory/Lightning/_build/dev/lib/rambo/priv/rambo: cannot execute: No such file or directory
  # ```
  #
  # You can try renaming `deps/rambo/priv/rambo-mac` to `deps/rambo/priv/rambo`.

  if [[ "$OS" == "Darwin" ]]; then
    echo "🔨 Compiling platform-specific dependencies..."
    mix compile.rambo
  fi

  echo "📦 Installing Node.js dependencies..."
  npm install --prefix assets

  echo "🔧 Setting up assets..."
  mix assets.setup

  echo "🗄️ Setting up database..."
  mix "do" ecto.create, ecto.migrate

  echo "⚡ Installing Lightning components..."
  mix lightning.install_runtime
  mix lightning.install_schemas
  mix lightning.install_adaptor_icons

  echo "✅ All dependencies installed successfully!"
}

main "$@"
