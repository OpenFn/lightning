#!/usr/bin/env bash

# Function to show usage
show_usage() {
  echo "Usage:"
  echo "  $0 [--proxy] --count <number>     Start local cluster (default: 2 instances)"
  echo "  $0 connect <node_number>          Connect to a specific node (1-4)"
  echo ""
  echo "Options:"
  echo "  --proxy         Start a Caddy reverse proxy on port 4000 (nodes will start from 4001)"
  echo "  --count <num>   Number of nodes to start (1-4, default: 2)"
  exit 1
}

# Handle connect subcommand
if [ "$1" = "connect" ]; then
  if [ -z "$2" ] || ! [[ "$2" =~ ^[1-4]$ ]]; then
    echo "Error: Please specify a valid node number (1-4)"
    show_usage
  fi

  NODE_NUM=$2
  echo "Connecting to node${NODE_NUM}@127.0.0.1..."
  exec iex --name "remote_shell${NODE_NUM}@127.0.0.1" --remsh "node${NODE_NUM}@127.0.0.1"
  # The exec command replaces the current process, so we don't need an explicit exit
  # If we reach this point, it means the exec failed, so we'll exit with its status code
  exit $?
fi

# Parse arguments
USE_PROXY=false
INSTANCES=2

while [[ $# -gt 0 ]]; do
  case $1 in
  --proxy)
    USE_PROXY=true
    shift
    ;;
  --count)
    if [ -z "$2" ] || ! [[ "$2" =~ ^[0-9]+$ ]]; then
      echo "Error: --count requires a numeric argument"
      show_usage
    fi
    INSTANCES=$2
    shift 2
    ;;
  *)
    echo "Unknown argument: $1"
    show_usage
    ;;
  esac
done

# Validate number of instances
if ! [[ "$INSTANCES" =~ ^[0-9]+$ ]]; then
  echo "Error: Number of instances must be a positive integer"
  show_usage
fi

if [ "$INSTANCES" -lt 1 ] || [ "$INSTANCES" -gt 4 ]; then
  echo "Error: Number of instances must be between 1 and 4"
  show_usage
fi

# Check for Caddy if proxy is requested
if [ "$USE_PROXY" = true ]; then
  if ! command -v caddy &>/dev/null; then
    echo "Error: Caddy is required for proxy mode but it's not installed"
    echo "Please install Caddy first:"
    echo "  Mac: brew install caddy"
    echo "  Linux: sudo apt install caddy"
    echo "  Or visit: https://caddyserver.com/docs/install"
    exit 1
  fi
fi

# Array to store background PIDs
declare -a PIDS

# Colors for different processes
declare -a COLORS=(
  "\033[0;36m" # Cyan
  "\033[0;32m" # Green
  "\033[0;35m" # Purple
  "\033[0;33m" # Yellow
  "\033[0;37m" # Gray (for proxy)
)
RESET="\033[0m"

# Cleanup function to kill all child processes
cleanup() {
  echo "Shutting down all processes..."
  for pid in "${PIDS[@]}"; do
    kill "$pid" 2>/dev/null
  done
  exit 0
}

# Set up trap for cleanup
trap cleanup INT TERM

# Function to run a command with colored output
run_with_color() {
  local color=$1
  local prefix=$2
  shift 2
  # Run the command and color its output
  "$@" 2>&1 | while read -r line; do
    echo -e "${color}${prefix} | ${line}${RESET}"
  done
}

# Create Caddy configuration if proxy is enabled
if [ "$USE_PROXY" = true ]; then
  BASE_PORT=4001
  CADDY_CONFIG=$(mktemp)
  echo "Creating Caddy configuration..."
  cat >"$CADDY_CONFIG" <<EOF
# Global options
{
    admin off
    auto_https off
    http_port 4000
}

# Reverse proxy configuration
localhost:4000 {
    reverse_proxy {
        to $(for i in $(seq 1 "$INSTANCES"); do echo "localhost:$((BASE_PORT + i - 1))"; done | paste -sd " " -)
        lb_policy round_robin
    }
}
EOF

  # Only log Caddy config if LOG_LEVEL is debug
  if [ "${LOG_LEVEL:-}" = "debug" ]; then
    echo "Caddy config:"
    cat "$CADDY_CONFIG"
  fi

  # Start Caddy
  run_with_color "${COLORS[4]}" "proxy" caddy run --adapter caddyfile --config "$CADDY_CONFIG" &
  PIDS+=($!)

  # Cleanup Caddy config on exit
  trap 'rm -f "$CADDY_CONFIG"' EXIT

  echo "Started reverse proxy on port 4000"
else
  BASE_PORT=4000
fi

# Start the requested number of instances
for i in $(seq 1 "$INSTANCES"); do
  export RTM_PORT=$((2222 + i - 1))
  PORT=$((BASE_PORT + i - 1)) run_with_color "${COLORS[$i - 1]}" "node$i" elixir --name "node$i@127.0.0.1" -S mix phx.server &
  PIDS+=($!)
done

if [ "$USE_PROXY" = true ]; then
  echo "Started $INSTANCES node(s) on ports $((BASE_PORT))-$((BASE_PORT + INSTANCES - 1)) with load balancer on port 4000"
  echo "RTM ports: 2222-$((2222 + INSTANCES - 1))"
else
  echo "Started $INSTANCES node(s) on ports $((BASE_PORT))-$((BASE_PORT + INSTANCES - 1))"
  echo "RTM ports: 2222-$((2222 + INSTANCES - 1))"
fi
echo "To connect to a specific node, use: $0 connect <node_number>"

# Wait for all background processes
wait
