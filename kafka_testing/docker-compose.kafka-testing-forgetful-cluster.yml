version: '3.9'

services:
  f-kafka-04:
    ports:
      - '127.0.0.1:9094:9094'
    image: bitnami/kafka:3.4.0
    hostname: "{{.Node.Hostname}}-{{.Service.Name}}"
    environment:
      BITNAMI_DEBUG: ${KAFKA_DEBUG}
      KAFKA_ENABLE_KRAFT: 'yes'
      # See https://sleeplessbeastie.eu/2021/10/22/how-to-generate-kafka-cluster-id/ wrt
      # setting the cluster ID
      KAFKA_KRAFT_CLUSTER_ID: 'ZGVkMTJkNTRkYjMyNDNkN2'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://f-kafka-04:9092,EXTERNAL://127.0.0.1:9094
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@f-kafka-04:9093,2@f-kafka-05:9093,3@f-kafka-06:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_RETENTION_MINUTES: 5
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - f-kafka-04-data:/bitnami/kafka
    deploy:
      placement:
        constraints:
          - "node.labels.name==node-1"
      replicas: 1
      resources:
        limits:
          memory: ${KAFKA_MEMORY_LIMIT}
        reservations:
          memory: ${KAFKA_MEMORY_RESERVE}
      restart_policy:
        condition: on-failure
    networks:
      - kafka-network

  f-kafka-05:
    ports:
      - '127.0.0.1:9095:9095'
    image: bitnami/kafka:3.4.0
    hostname: "{{.Node.Hostname}}-{{.Service.Name}}"
    environment:
      BITNAMI_DEBUG: ${KAFKA_DEBUG}
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: 'ZGVkMTJkNTRkYjMyNDNkN2'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_BROKER_ID: 2
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://f-kafka-05:9092,EXTERNAL://127.0.0.1:9095
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@f-kafka-04:9093,2@f-kafka-05:9093,3@f-kafka-06:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_RETENTION_MINUTES: 5
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - f-kafka-05-data:/bitnami/kafka
    deploy:
      placement:
        constraints:
          - "node.labels.name==node-2"
      replicas: 1
      resources:
        limits:
          memory: ${KAFKA_MEMORY_LIMIT}
        reservations:
          memory: ${KAFKA_MEMORY_RESERVE}
      restart_policy:
        condition: on-failure
    networks:
      - kafka-network

  f-kafka-06:
    ports:
      - '127.0.0.1:9096:9096'
    image: bitnami/kafka:3.4.0
    hostname: "{{.Node.Hostname}}-{{.Service.Name}}"
    environment:
      BITNAMI_DEBUG: ${KAFKA_DEBUG}
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: 'ZGVkMTJkNTRkYjMyNDNkN2'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CFG_NODE_ID: 3
      KAFKA_CFG_BROKER_ID: 3
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://f-kafka-06:9092,EXTERNAL://127.0.0.1:9096
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@f-kafka-04:9093,2@f-kafka-05:9093,3@f-kafka-06:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_OFFSETS_RETENTION_MINUTES: 5
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - f-kafka-06-data:/bitnami/kafka    
    deploy:
      placement:
        constraints:
          - "node.labels.name==node-3"
      replicas: 1
      resources:
        limits:
          memory: ${KAFKA_MEMORY_LIMIT}
        reservations:
          memory: ${KAFKA_MEMORY_RESERVE}
      restart_policy:
        condition: on-failure
    networks:
      - kafka-network

networks:
  kafka-network:
    external: true

volumes:
  f-kafka-04-data:
  f-kafka-05-data:
  f-kafka-06-data:
